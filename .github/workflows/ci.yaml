name: React.js CI

on:
  push:
  pull_request:
    branches: "master"

jobs:
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./quiz-app
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository
        uses: actions/checkout@v4

      - name: USE NODEJS ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4

      - name: Install project dependencies
        working-directory: ./quiz-app
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env:
          CI: true

      - name: Build
        run: npm run build
        working-directory:
          ./quiz-app

          # Setup sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v8

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets._GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: quiz-app
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.sources=src/
            -Dsonar.verbose=true

  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository
        uses: actions/checkout@v4

      - name: USE NODEJS ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4

      - name: Install project dependencies
        working-directory: ./backend
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env:
          CI:
            true

            # Setup sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v8

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets._GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: backend
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.sources=.
            -Dsonar.verbose=true

  frontend-security:
    needs: frontend-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./quiz-app
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          version: latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Authenticate
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code Test
        run: snyk code test --all-projects
        continue-on-error: true

  backend-security:
    needs: backend-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          version: latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Authenticate
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code Test
        run: snyk code test --all-projects
        continue-on-error: true

  frontend-image:
    needs: frontend-security
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.build_image.outputs.IMAGE_TAG }}
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4

      - name: Build frontend Docker image
        id: build_image
        working-directory: ./quiz-app
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c 1-7)
          echo "IMAGE_TAG=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          docker build . -t frontend-js:$IMAGE_TAG

      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db
          restore-keys: |
            ${{ runner.os }}-trivy-db

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "frontend-js:${{ steps.build_image.outputs.IMAGE_TAG }}"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

        env:
          GITHUB_TOKEN: ${{ secrets._GITHUB_TOKEN }}

      - name: List Docker images
        run: |
          docker images

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          snyk-token: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Authenticate
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Container monitor
        run: snyk container monitor "frontend-js:${{ steps.build_image.outputs.IMAGE_TAG }}" --file = ./quiz-app/Dockerfile -d --experimental
        working-directory: ./quiz-app
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk to check for vulnerabilities in the Docker image
        uses: snyk/actions/docker@master
        with:
          image: "frontend-js:${{ steps.build_image.outputs.IMAGE_TAG }}"
          args: --file=quiz-app/Dockerfile --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push the Docker image
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c 1-7)
          echo "Pushing Docker image with tag: $IMAGE_TAG"
          docker tag frontend-js:$IMAGE_TAG ${{ secrets.DOCKER_USERNAME }}/frontend-js:$IMAGE_TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend-js:$IMAGE_TAG

  backend-image:
    needs: [backend-security, frontend-image]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Build backend Docker image
        working-directory: ./backend
        env:
          IMAGE_TAG: ${{ needs.frontend-image.outputs.IMAGE_TAG }}
        run: |
          docker build . -t backend-api:$IMAGE_TAG

      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db
          restore-keys: |
            ${{ runner.os }}-trivy-db

      - name: Run Trivy vulnerability scanner on local image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "backend-api:${{ needs.frontend-image.outputs.IMAGE_TAG }}"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          args: "--scanners vuln"
        env:
          GITHUB_TOKEN: ${{ secrets._GITHUB_TOKEN }}

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          snyk-token: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Authenticate
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Container monitor
        run: snyk container monitor backend-api:$IMAGE_TAG --file=backend/Dockerfile
        working-directory: ./backend

      - name: Run Snyk to check for vulnerabilities in the Docker image
        uses: snyk/actions/docker@master
        with:
          image: backend-api:$IMAGE_TAG
          args: --file=quiz-app/Dockerfile --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push the Docker image
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c 1-7)
          echo "Pushing Docker image with tag: $IMAGE_TAG"
          docker tag backend-api:$IMAGE_TAG ${{ secrets.DOCKER_USERNAME }}/backend-api:$IMAGE_TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/backend-api:$IMAGE_TAG

  k8s-manifest-scan:
    needs: [frontend-image, backend-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check Kubernetes manifest file for issues
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: k8s/
          args: --severity-threshold=high

  update-helm:
    needs: k8s-manifest-scan
    runs-on: ubuntu-latest
    steps:
      - name: check-out git repository
        uses: actions/checkout@v4

      - name: Updating new image tag in values.yaml file
        run: |
          echo "Updating values.yaml with IMAGE_TAG=$IMAGE_TAG"
          sed -i 's|tag:.*|tag: '"$IMAGE_TAG"'|' k8s/values.yaml

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions" 
          git config --global user.email "github-actions@github.com"

      - name: Stage Changes
        run: git add deel-app/values.yaml

      - name: Commit Changes
        run: |
          git diff-index --quiet HEAD || git commit -m "Update image repository and tag to $ECR_REGISTRY:$IMAGE_TAG"

      - name: Push Changes
        id: push-changes
        run: git push origin HEAD:main

      - name: Retry Commit changes
        id: retry-push-changes
        if: ${{ steps.push-changes.conclusion == 'failure' }}
        run: |
          git pull origin main --rebase && git push origin main

      - name: Notify on failure
        id: slack
        uses: rtCamp/action-slack-notify@v2
        if: ${{ failure() && steps.retry-push-changes.conclusion == 'failure' }}
        with:
          slack_webhook: ${{ secrets.SLACK_WEBHOOK }}
          channel: C06S8B0H9DG
          color: danger
          message: "GitHub workflow failed for commit ${{ github.event.head_commit.message }} with status ${{ github.workflow.status }}"
#
